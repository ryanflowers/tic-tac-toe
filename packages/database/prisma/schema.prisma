// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  username  String     @unique
  games     GameUser[]
}

model GameUser {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  game          Game     @relation("GamePlayers", fields: [gameId], references: [id])
  gameId        String
  nextTurnGames Game[]   @relation("NextTurnPlayer")
  moves         Move[]
  playerKey     String // X or O
  winner        Game?    @relation("WinningPlayer")
  winnerId      String?
}

model Game {
  id               String     @id @default(uuid())
  createdAt        DateTime   @default(now())
  status           GameStatus @default(WAITING_FOR_PLAYER)
  board            String     @default("---------") // 9 characters representing the board
  nextTurnPlayer   GameUser?   @relation("NextTurnPlayer", fields: [nextTurnPlayerId], references: [id])
  nextTurnPlayerId String?
  moves            Move[]
  players          GameUser[] @relation("GamePlayers")
  name             String
  winner           GameUser? @relation("WinningPlayer", fields: [winnerId], references: [id])
  winnerId         String?   @unique
}

model Move {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  player    GameUser @relation(fields: [playerId], references: [id])
  playerId  String
  cellIndex Int
}

enum GameStatus {
  WAITING_FOR_PLAYER
  IN_PROGRESS
  X_WON
  O_WON
  DRAW
}